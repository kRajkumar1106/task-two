
Introduction:

When working with JavaScript, you often come across two important objects: the `document` object and the `window` object. These objects are fundamental to web development and provide a wide range of functionality. 


Document Object:

The `document` object represents the web page loaded in the current browser window or frame. It serves as an interface to access the elements and content within an HTML document. The `document` object provides various properties and methods that allow you to manipulate the structure, style, and content of the page.

Key features of the `document` object include:

1. DOM Manipulation: The `document` object provides methods like `getElementById()`, `querySelector()`, and `createElement()` to access and modify elements within the DOM. You can change text, HTML content, attributes, and more using these methods.

2. Events: The `document` object allows you to attach event listeners to respond to user actions or browser events, such as clicks, keystrokes, or document loading. Examples include `addEventListener()` and `onload`.

3. Forms and Input Handling: You can interact with forms, retrieve input values, validate data, and submit forms using the `document` object. Methods like `getElementByTagName()` and `getElementByClassName()` help you target specific form elements.



Window Object:

The `window` object represents the browser window or frame that contains the DOM and global JavaScript environment. It acts as the global object for all JavaScript code running within a window or frame. The `window` object provides methods, properties, and events that enable interaction with the browser and control over windows and frames.

Important aspects of the `window` object include:

1. Global Scope: Variables and functions defined in the global scope become properties and methods of the `window` object. For example, if you define a variable `x` in the global scope, you can access it as `window.x`.

2. Navigation: The `window` object provides methods like `open()`, `close()`, `reload()`, and `history` to control the navigation and behavior of the browser window. You can open new windows, close existing ones, reload the page, and manipulate the browsing history.

3. Timers: The `window` object offers functions like `setTimeout()` and `setInterval()` to execute code at specified intervals. These methods are commonly used for animations, scheduling tasks, or implementing countdowns.

4. Browser Information: Properties like `navigator` and `location` within the `window` object give you information about the user's browser and the current URL. You can access details such as the user agent, screen dimensions, and the URL of the page.

